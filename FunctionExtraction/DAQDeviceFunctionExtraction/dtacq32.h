#if !defined(AFX_DTACQ32_H__35EC4A7A_3170_4FDA_BEA1_DD7CA399EC9A__INCLUDED_)
#define AFX_DTACQ32_H__35EC4A7A_3170_4FDA_BEA1_DD7CA399EC9A__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CDTAcq32 wrapper class

class CDTAcq32 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CDTAcq32)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xeccba8a5, 0x1f6d, 0x11cf, { 0xb6, 0x97, 0x0, 0x20, 0xaf, 0xeb, 0x10, 0xa0 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	long GetHDass();
	void SetHDass(long);
	double GetFrequency();
	void SetFrequency(double);
	short GetDmaUsage();
	void SetDmaUsage(short);
	short GetTriggeredScan();
	void SetTriggeredScan(short);
	short GetChannelType();
	void SetChannelType(short);
	short GetEncoding();
	void SetEncoding(short);
	short GetTrigger();
	void SetTrigger(short);
	short GetClockSource();
	void SetClockSource(short);
	double GetRetriggerFreq();
	void SetRetriggerFreq(double);
	long GetClockDivider();
	void SetClockDivider(long);
	short GetResolution();
	void SetResolution(short);
	short GetRange();
	void SetRange(short);
	float GetMinRange();
	void SetMinRange(float);
	float GetMaxRange();
	void SetMaxRange(float);
	short GetDataFlow();
	void SetDataFlow(short);
	short GetWrapMode();
	void SetWrapMode(short);
	short GetGateType();
	void SetGateType(short);
	short GetPulseType();
	void SetPulseType(short);
	double GetPulseWidth();
	void SetPulseWidth(double);
	short GetCTMode();
	void SetCTMode(short);
	short GetCascadeMode();
	void SetCascadeMode(short);
	long GetReserved();
	void SetReserved(long);
	short GetNumResolutions();
	void SetNumResolutions(short);
	short GetNumRanges();
	void SetNumRanges(short);
	short GetNumGains();
	void SetNumGains(short);
	short GetNumFilters();
	void SetNumFilters(short);
	long GetQueue();
	void SetQueue(long);
	short GetSyncDIOUsage();
	void SetSyncDIOUsage(short);
	long GetDTConnectXferSize();
	void SetDTConnectXferSize(long);
	long GetDTConnectXferCount();
	void SetDTConnectXferCount(long);
	short GetNumSubSystems();
	void SetNumSubSystems(short);
	short GetSubSystem();
	void SetSubSystem(short);
	short GetSubSysType();
	void SetSubSysType(short);
	short GetSubSysElement();
	void SetSubSysElement(short);
	long GetHDev();
	void SetHDev(long);
	short GetNumBoards();
	void SetNumBoards(short);
	long GetListSize();
	void SetListSize(long);
	OLE_HANDLE GetHWnd();
	void SetHWnd(OLE_HANDLE);
	CString GetBoard();
	void SetBoard(LPCTSTR);
	CString GetCaption();
	void SetCaption(LPCTSTR);
	short GetRetriggerMode();
	void SetRetriggerMode(short);
	long GetLastError();
	void SetLastError(long);
	CString GetLastErrDescription();
	void SetLastErrDescription(LPCTSTR);
	CString GetDeviceName();
	void SetDeviceName(LPCTSTR);
	short GetRetrigger();
	void SetRetrigger(short);
	long GetMultiScanCount();
	void SetMultiScanCount(long);
	short GetPreTrigger();
	void SetPreTrigger(short);
	short GetMeasureStartEdge();
	void SetMeasureStartEdge(short);
	short GetMeasureStopEdge();
	void SetMeasureStopEdge(short);
	short GetClockPrescale();
	void SetClockPrescale(short);
	short GetEdgeOrder();
	void SetEdgeOrder(short);
	short GetX4Scaling();
	void SetX4Scaling(short);
	short GetIndexInput();
	void SetIndexInput(short);

// Operations
public:
	void Config();
	void Start();
	void Stop();
	void Abort();
	void Pause();
	void Continue();
	void Flush();
	void Reset();
	void PutSingleValue(long uiChannel, double dGain, long lValue);
	long GetSingleValue(long uiChannel, double dGain);
	long CTReadEvents();
	void MeasureFrequency(double dCountDuration);
	void EnumBoards();
	void EnumSS();
	void EnumSSCaps(short uiCap);
	void ClearError();
	void DTConnectBurst(long TransferSize, long TransferCount);
	short GetDevCaps(short olDc);
	long GetSSCaps(short OlSSc);
	double GetSSCapsEx(short OlSSc);
	short GetChannelList(short index);
	void SetChannelList(short index, short nNewValue);
	double GetGainList(short index);
	void SetGainList(short index, double newValue);
	double GetFilterList(short index);
	void SetFilterList(short index, double newValue);
	short GetResolutionValues(short index);
	double GetMinRangeValues(short index);
	double GetMaxRangeValues(short index);
	double GetGainValues(short index);
	double GetFilterValues(short index);
	BOOL GetInhibitList(short index);
	void SetInhibitList(short index, BOOL bNewValue);
	long GetDIOList(short index);
	void SetDIOList(short index, long nNewValue);
	CString GetSubSystemList(short index);
	CString GetBoardList(short index);
	short GetQueueSize(short uiQueue);
	void PowerOn();
	void PowerOff();
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_DTACQ32_H__35EC4A7A_3170_4FDA_BEA1_DD7CA399EC9A__INCLUDED_)
